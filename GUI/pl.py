#! /usr/bin/env python
#
# GUI module generated by PAGE version 4.5
# In conjunction with Tcl version 8.6
#    Apr 14, 2015 05:02:35 PM
#
import sys

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = 0
except ImportError:
    import tkinter.ttk as ttk
    py3 = 1

import pl_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    root.title('Image_Filters_with_OpenMP')
    geom = "674x216+328+156"
    root.geometry(geom)
    pl_support.set_Tk_var()
    w = Image_Filters_with_OpenMP (root)
    pl_support.init(root, w)
    root.mainloop()

w = None
def create_Image_Filters_with_OpenMP(root, param=None):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    w.title('Image_Filters_with_OpenMP')
    geom = "674x216+328+156"
    w.geometry(geom)
    pl_support.set_Tk_var()
    w_win = Image_Filters_with_OpenMP (w)
    pl_support.init(w, w_win, param)
    return w_win

def destroy_Image_Filters_with_OpenMP():
    global w
    w.destroy()
    w = None


class Image_Filters_with_OpenMP:
    def __init__(self, master=None):
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        font11 = "-family {Yu Gothic} -size 14 -weight bold -slant "  \
            "roman -underline 0 -overstrike 0"
        font16 = "-family {Yu Gothic} -size 10 -weight bold -slant "  \
            "roman -underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])
        master.configure(background="#000000")
        master.configure(highlightbackground="#d9d9d9")
        master.configure(highlightcolor="black")


        self.Entry1 = Entry(master)
        self.Entry1.place(relx=0.03, rely=0.32, relheight=0.09, relwidth=0.82)
        self.Entry1.configure(background="white")
        self.Entry1.configure(disabledforeground="#a3a3a3")
        self.Entry1.configure(font="TkFixedFont")
        self.Entry1.configure(foreground="#000000")
        self.Entry1.configure(highlightbackground="#d9d9d9")
        self.Entry1.configure(highlightcolor="black")
        self.Entry1.configure(insertbackground="black")
        self.Entry1.configure(selectbackground="#c4c4c4")
        self.Entry1.configure(selectforeground="black")
        self.Entry1.configure(textvariable=pl_support.inputText)

        self.Button1 = Button(master)
        self.Button1.place(relx=0.88, rely=0.32, height=24, width=67)
        self.Button1.configure(activebackground="#d9d9d9")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#ff8040")
        self.Button1.configure(command=pl_support.fileChooser)
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(font=font16)
        self.Button1.configure(foreground="#ffffff")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''Browse''')

        self.Scrolledcombo1 = ScrolledCombo(master)
        self.Scrolledcombo1.place(relx=0.03, rely=0.6,relwidth=0.27)
        self.value_list = ['Median','Min','Max','Mid Point','Mean','Min_Max','Marr/Hildreth Edge Detector',]
        self.Scrolledcombo1.configure(values=self.value_list)
        self.Scrolledcombo1.configure(textvariable=pl_support.filterType)
        self.Scrolledcombo1.configure(foreground="black")
        self.Scrolledcombo1.configure(background="white")

        self.Label1 = Label(master)
        self.Label1.place(relx=0.03, rely=0.46, height=21, width=134)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(anchor=W)
        self.Label1.configure(background="#000000")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font=font11)
        self.Label1.configure(foreground="#ffffff")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Filter:''')

        self.Button2 = Button(master)
        self.Button2.place(relx=0.42, rely=0.79, height=24, width=137)
        self.Button2.configure(activebackground="#d9d9d9")
        self.Button2.configure(activeforeground="#000000")
        self.Button2.configure(background="#0080c0")
        self.Button2.configure(command=pl_support.run)
        self.Button2.configure(disabledforeground="#a3a3a3")
        self.Button2.configure(font=font11)
        self.Button2.configure(foreground="#ffffff")
        self.Button2.configure(highlightbackground="#d9d9d9")
        self.Button2.configure(highlightcolor="black")
        self.Button2.configure(pady="0")
        self.Button2.configure(text='''Execute''')

        self.menubar = Menu(master,bg=_bgcolor,fg=_fgcolor)
        master.configure(menu = self.menubar)



        self.ImageLabel = Label(master)
        self.ImageLabel.place(relx=0.03, rely=0.14, height=21, width=64)
        self.ImageLabel.configure(background="#000000")
        self.ImageLabel.configure(disabledforeground="#a3a3a3")
        self.ImageLabel.configure(font=font11)
        self.ImageLabel.configure(foreground="#ffffff")
        self.ImageLabel.configure(text='''Image :''')
        self.ImageLabel.configure(width=64)





# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=self._autoscroll(vsb),
        #    xscrollcommand=self._autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = Pack.__dict__.keys() | Grid.__dict__.keys() \
                  | Place.__dict__.keys()
        else:
            methods = Pack.__dict__.keys() + Grid.__dict__.keys() \
                  + Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        return func(cls, container, **kw)
    return wrapped

class ScrolledCombo(AutoScroll, ttk.Combobox):
    '''A ttk Combobox with a horizontal scrollbar that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        ttk.Combobox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

if __name__ == '__main__':
    vp_start_gui()


